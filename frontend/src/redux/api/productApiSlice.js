import { PRODUCT_URL, UPLOAD_URL } from "../features/constants";
import { apiSlice } from "./apiSlice";

export const productApiSlice = apiSlice.injectEndpoints({
    endpoints:(builder)=>({
        getProducts:builder.query({
            query:({keyword})=>({
                url:`${PRODUCT_URL}`,
                params:{keyword}
            }),
            keepUnusedDataFor:5,
            providesTags:["Product"]
        }),
        getProductById:builder.query({
            query:(productId)=>({
                url:`${PRODUCT_URL}/${productId}`,
                providesTags:(result,error,productId)=>[
                    {type:"Product",id:productId}
                ]
            })
        }),
        allProducts:builder.query({
            query:()=>({
                url:`${PRODUCT_URL}/allproducts`
            })
        }),
        getProductDetails:builder.query({
            query:(productId)=>({
                url:`${PRODUCT_URL}/${productId}`
            }),
            keepUnusedDataFor:5,
        }),
        createProduct:builder.mutation({
            query:(productData)=>({
                url:`${PRODUCT_URL}`,
                method:"POST",
                body:productData
            }),
            invalidatesTags:["Product"],
        }),
        updateProduct:builder.mutation({
            query:({productId,formData})=>({
                url:`${PRODUCT_URL}/${productId}`,
                method:"PUT",
                body:formData
            })
        }),
        updateProductImage:builder.mutation({
            query:(data)=>({
                url:`${UPLOAD_URL}`,
                method:"POST",
                body:data
            })
        }),
        deleteProduct:builder.mutation({
            query:(productId)=>({
                url:`${PRODUCT_URL}/${productId}`,
                method:"DELETE",
            }),
            providesTags:["Product"],
        }),
        createReview:builder.mutation({
            query:(data)=>({
                url:`${PRODUCT_URL}/${data.productId}/reviews`,
                method:"POST",
                body:data,
            }),
        }),
        getTopProduct:builder.query({
            query:()=>({
                url:`${PRODUCT_URL}/top`,
            }),
            keepUnusedDataFor:5
        }),
        getNewProduct:builder.query({
            query:()=>({
                url:`${PRODUCT_URL}/new`,
            }),
            keepUnusedDataFor:5
        }),
        getFilteredProducts:builder.query({
            query:({radio,checked})=>({
                url:`${PRODUCT_URL}/filtered-products`,
                method:"POST",
                body:{radio,checked}
            }),
            keepUnusedDataFor:5
        }),
    })
})

export const {useAllProductsQuery,useCreateProductMutation,useCreateReviewMutation,useDeleteProductMutation,useGetTopProductQuery,useGetProductByIdQuery,useGetProductDetailsQuery,useGetProductsQuery,useGetNewProductQuery,useUpdateProductMutation,useUpdateProductImageMutation,useGetFilteredProductsQuery} = productApiSlice